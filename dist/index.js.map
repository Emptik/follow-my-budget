{"version":3,"file":"index.js","mappings":"mMAAqBA,EAAAA,WACjB,c,4FAAc,SACVC,KAAKC,YAAcC,SAASC,cAAc,S,gDAG9C,WACI,IAAMC,EAAO,IAAIC,KACXC,EAAcF,EAAKG,cAQnBC,EANS,CACX,UAAW,WAAY,QACvB,QAAS,MAAO,OAAQ,OACxB,SAAU,YAAa,UACvB,WAAY,YALWJ,EAAKK,YAQhCT,KAAKC,YAAYS,YAAjB,UAAkCF,EAAlC,YAAkDF,Q,mBAhBrCP,G,gVCUrB,EAPc,CACVY,QAAS,CACLC,KCqDR,IA1DMC,WACF,c,4FAAc,SACVb,KAAKc,SAAW,GAChBd,KAAKe,YAAc,EACnBf,KAAKgB,aAAe,E,gDAGxB,SAAYC,GACR,IAAMC,EAAwBlB,KAAKc,SAASK,MACxC,SAACC,GAAD,OAAaA,EAAQC,KAAOJ,EAAYI,WAGdC,IAA1BJ,EAEAlB,KAAKc,SAASS,KAAKN,GAGnBjB,KAAKc,SAASU,OACVxB,KAAKc,SAASW,QAAQP,GAAwB,K,4BAK1D,SAAeQ,GACN1B,KAAKc,SAASK,MAAK,SAACC,GAAD,OAAaA,EAAQC,KAAOK,EAAkBL,MAKlErB,KAAKe,aAAeW,EAAkBC,MAHtC3B,KAAKe,aAAeW,EAAkBC,Q,6BAO9C,SAAgBC,QACkEN,IAA1EtB,KAAKc,SAASK,MAAK,SAACC,GAAD,OAAaA,EAAQC,KAAOO,EAAmBP,MAElErB,KAAKgB,cAAgBY,EAAmBD,MAGxC3B,KAAKgB,cAAgBY,EAAmBD,Q,6BAIhD,SAAgBV,GACZ,OAAQA,EAAYY,MAChB,IAAK,MACD7B,KAAK8B,eAAeb,GACpB,MACJ,IAAK,MACDjB,KAAK+B,gBAAgBd,GAK7BjB,KAAKgC,YAAYf,Q,mBAtDnBJ,IDMEoB,OEIR,IAVMC,WACF,c,4FAAc,SACVlC,KAAKiC,OAAS,E,8CAGlB,SAAUlB,EAAaC,GACnBhB,KAAKiC,OAASlB,EAAcC,O,mBAN9BkB,M,0KCEeC,EAAAA,WACjB,c,4FAAc,SACVnC,KAAKoC,aAAe,CAChBC,OAAQ,CACJR,KAAM3B,SAASC,cAAc,sBAC7BmC,YAAapC,SAASC,cAAc,6BACpCwB,MAAOzB,SAASC,cAAc,uBAC9BoC,OAAQrC,SAASC,cAAc,kBAEnCqC,OAAQ,CACJF,YAAapC,SAASC,cAAc,6BACpCwB,MAAOzB,SAASC,cAAc,yBAGtCH,KAAKiB,YAAc,KACnBjB,KAAKyC,eAAiB,K,mDAG1B,SAAgBA,GAAgB,WAC5BzC,KAAKoC,aAAaC,OAAOE,OAAOG,iBAAiB,SAAS,SAACC,GACvD,EAAKF,eAAiBA,EACtB,EAAKG,gBACLD,EAAME,oBAEV7C,KAAKoC,aAAaC,OAAOC,YAAYI,iBAAiB,SAAS,WAC3D,EAAKN,aAAaI,OAAOF,YAAYQ,UAAUC,IAAI,2BAEvD/C,KAAKoC,aAAaC,OAAOV,MAAMe,iBAAiB,SAAS,WACrD,EAAKN,aAAaI,OAAOb,MAAMmB,UAAUC,IAAI,6B,2BAIrD,WACI,IAAMC,EAAiB,CAAEV,YAAa,KAAMX,MAAO,MAI/C3B,KAAKoC,aAAaC,OACbC,YAAYX,MAAMsB,OAAS,GAAKjD,KAAKoC,aAAaC,OAClDC,YAAYX,MAAMsB,OAAS,IAEhCD,EAAeV,aAAc,EAC7BtC,KAAKoC,aAAaI,OAAOF,YAAYQ,UAAUI,OAAO,yBAEtDF,EAAeV,aAAc,EAI7Ba,OAAOnD,KAAKoC,aAAaC,OAAOV,MAAMA,QAAU,GAChDqB,EAAerB,OAAQ,EACvB3B,KAAKoC,aAAaI,OAAOb,MAAMmB,UAAUI,OAAO,yBAEhDF,EAAerB,OAAQ,GAIQ,IAA/BqB,EAAeV,cAAiD,IAAzBU,EAAerB,OACtD3B,KAAKoD,a,sBAIb,WACI,IAAI/B,EAEAA,EADqB,OAArBrB,KAAKiB,YACA,EAEAjB,KAAKiB,YAAYI,GAAK,EAE/BrB,KAAKqD,eAAehC,K,4BAGxB,SAAeA,GACXrB,KAAKiB,YAAc,CACfI,GAAAA,EACAQ,KAAM7B,KAAKoC,aAAaC,OAAOR,KAAKF,MACpCW,YAAatC,KAAKoC,aAAaC,OAAOC,YAAYX,MAClDA,MAAO2B,WAAWtD,KAAKoC,aAAaC,OAAOV,MAAMA,QAErD4B,EAAAA,QAAAA,KAAAA,gBAAmCvD,KAAKiB,aACxCjB,KAAKyC,iBACLzC,KAAKwD,gB,yBAGT,WACIxD,KAAKoC,aAAaC,OAAOC,YAAYX,MAAQ,GAC7C3B,KAAKoC,aAAaC,OAAOV,MAAMA,MAAQ,M,sBArF1BQ,G,0KCAAsB,EAAAA,WACjB,c,4FAAc,SACVzD,KAAK0D,gBAAkBxD,SAASC,cAAc,2BAC9CH,KAAK2D,kBAAoBzD,SAASC,cAAc,4BAChDH,KAAK4D,oBAAsB,K,qDAG/B,SAAgBC,EAAuBC,GAEnC,IAFmD,WAC7CC,EAAkB7D,SAAS8D,iBAAiB,wBACzCC,EAAQ,EAAGA,EAAQF,EAAgBd,OAAQgB,GAAS,EACzDF,EAAgBE,GAAOvB,iBAAiB,SAAS,SAACC,GAC9C,EAAKuB,kBAAkBvB,EAAOkB,EAAuBC,Q,+BAKjE,WACI,IAAMK,EAAkBZ,EAAAA,QAAAA,KAAAA,SAAAA,OAAmC,GAAG,GAC9D,GAA6B,QAAzBY,EAAgBtC,KAAgB,CAChC,IAAMH,EAAoB,8CAAH,OACQyC,EAAgB9C,GADxB,oMAGP8C,EAAgB7B,YAHT,4OAKwB6B,EAAgBxC,MALxC,mSAYvB3B,KAAK0D,gBAAgBU,mBAAmB,YAAa1C,OAClD,CACH,IAAME,EAAqB,8CAAH,OACOuC,EAAgB9C,GADvB,qOAGyB8C,EAAgB7B,YAHzC,4OAKuB6B,EAAgBxC,MALvC,0YAaxB3B,KAAK2D,kBAAkBS,mBAAmB,YAAaxC,M,+BAqB/D,SAAkBe,EAAOkB,EAAuBC,GAAgB,WAK5D,GAJA9D,KAAK4D,oBAAsBjB,EAAM0B,OAC5BC,cAAcA,cACdA,cAAcA,cAE4B,OAA3CtE,KAAK4D,oBAAoBU,cAAwB,CACjDtE,KAAK4D,oBAAoBU,cAAcC,YAAYvE,KAAK4D,qBAExD,IAAM3C,EAAcsC,EAAAA,QAAAA,KAAAA,SAAAA,MAChB,SAACnC,GAAD,OAAaA,EAAQC,KAAO8B,OAAO,EAAKS,oBAAoBvC,OAGhEkC,EAAAA,QAAAA,KAAAA,gBAAmCtC,GACnC4C,IACAC,Q,8BA/BR,WAC2B5D,SAAS8D,iBAAiB,4BAElCQ,SAAQ,SAACC,GACpB,IAAMC,EAAgBD,EAChBE,EAAeD,EAAcJ,cAAcA,cAAcA,cAAcjD,GAOvEuD,EAAoC,IALfrB,EAAAA,QAAAA,KAAAA,SAAAA,MACvB,SAACtC,GAAD,OAAiBA,EAAYI,KAAO8B,OAAOwB,MAGPhD,MACS4B,EAAAA,QAAAA,KAAAA,YACjDmB,EAAchE,YAAd,UAA+BmE,KAAKC,MAAMF,GAA1C,Y,gCA/DSnB,G,0KCAAsB,EAAAA,WACjB,c,4FAAc,SACV/E,KAAKgF,cAAgB9E,SAASC,cAAc,W,qDAGhD,WACIoD,EAAAA,QAAAA,OAAAA,UACIA,EAAAA,QAAAA,KAAAA,YAAgCA,EAAAA,QAAAA,KAAAA,kB,8BAIxC,WACIvD,KAAKgF,cAActE,YAAc6C,EAAAA,QAAAA,OAAAA,Y,6BAZpBwB,G,0KCAAE,EAAAA,WACjB,c,4FAAc,SACVjF,KAAKkF,kBAAoBhF,SAASC,cAAc,wBAChDH,KAAKmF,mBAAqBjF,SAASC,cAAc,yBACjDH,KAAKoF,6BAA+BlF,SAASC,cAAc,qBAC3DH,KAAK4E,kBAAoB,K,wDAG7B,WACI5E,KAAK4E,kBACiC,IAAlCrB,EAAAA,QAAAA,KAAAA,aACAA,EAAAA,QAAAA,KAAAA,c,yBAGR,WACIvD,KAAKkF,kBAAkBxE,YAAvB,YAA0C6C,EAAAA,QAAAA,KAAAA,aAC1CvD,KAAKmF,mBAAmBzE,YAAxB,YAA2C6C,EAAAA,QAAAA,KAAAA,cAC3CvD,KAAKoF,6BAA6B1E,YAAlC,UAAmDmE,KAAKC,MAAM9E,KAAK4E,mBAAnE,W,mBAjBaK,GCKfI,EAAa,WACf,IAAMpD,EAAS,IAAI8C,EACnBA,EAAWO,kBACXrD,EAAOsD,iBAQLC,EAAW,WACb,IAAMC,EAAO,IAAIR,EACjBQ,EAAKC,sBACLD,EAAKE,eAGH7B,EAAiB,WACnB0B,KAGE3B,EAAwB,WAC1BJ,EAAgBmC,gBAChBP,MAhBa,IAAItF,GACZ8F,eAgCQ,IAAI1D,GACZ2D,iBARc,WAPC,IACd7E,GAAAA,EAAc,IAAIwC,GACZsC,oBACZtC,EAAgBmC,gBAChB3E,EAAY6E,gBAAgBjC,EAAuBC,GAKnD0B,IACAH,O","sources":["webpack://follow-my-budget/./src/components/Date/DateView.js","webpack://follow-my-budget/./src/store/main.js","webpack://follow-my-budget/./src/store/modules/Form.js","webpack://follow-my-budget/./src/store/modules/Budget.js","webpack://follow-my-budget/./src/components/Form/FormView.js","webpack://follow-my-budget/./src/components/Transaction/TransactionView.js","webpack://follow-my-budget/./src/components/Budget/BudgetView.js","webpack://follow-my-budget/./src/components/Card/CardView.js","webpack://follow-my-budget/./src/index.js"],"sourcesContent":["export default class DateView {\n    constructor() {\n        this.dateElement = document.querySelector('.date');\n    }\n\n    displayDate() {\n        const date = new Date();\n        const currentYear = date.getFullYear();\n        const currentNumberMonth = date.getMonth();\n        const months = [\n            'January', 'February', 'March',\n            'April', 'May', 'June', 'July',\n            'August', 'September', 'October',\n            'November', 'December',\n        ];\n        const currentMonth = months[currentNumberMonth];\n        this.dateElement.textContent = `${currentMonth} ${currentYear}`;\n    }\n}\n","import form from './modules/Form.js';\nimport budget from './modules/Budget.js';\n\nconst store = {\n    modules: {\n        form,\n        budget,\n    },\n};\n\nexport default store;\n","class Form {\n    constructor() {\n        this.formData = [];\n        this.totalIncome = 0;\n        this.totalExpense = 0;\n    }\n\n    setFormData(transaction) {\n        const transactionInFormData = this.formData.find(\n            (element) => element.id === transaction.id,\n        );\n\n        if (transactionInFormData === undefined) {\n            // Add transaction\n            this.formData.push(transaction);\n        } else {\n            // Remove transaction\n            this.formData.splice(\n                this.formData.indexOf(transactionInFormData), 1,\n            );\n        }\n    }\n\n    setTotalIncome(incomeTransaction) {\n        if (!this.formData.find((element) => element.id === incomeTransaction.id)) {\n            // Add income value\n            this.totalIncome += incomeTransaction.value;\n        } else {\n            // Remove income value\n            this.totalIncome -= incomeTransaction.value;\n        }\n    }\n\n    setTotalExpense(expenseTransaction) {\n        if (this.formData.find((element) => element.id === expenseTransaction.id) === undefined) {\n            // Add expense value\n            this.totalExpense += expenseTransaction.value;\n        } else {\n            // Remove expense value\n            this.totalExpense -= expenseTransaction.value;\n        }\n    }\n\n    callFormSetters(transaction) {\n        switch (transaction.type) {\n            case 'inc':\n                this.setTotalIncome(transaction);\n                break;\n            case 'exp':\n                this.setTotalExpense(transaction);\n                break;\n            default:\n                break;\n        }\n        this.setFormData(transaction);\n    }\n}\n\nexport default new Form();\n","class Budget {\n    constructor() {\n        this.budget = 0;\n    }\n\n    setBudget(totalIncome, totalExpense) {\n        this.budget = totalIncome - totalExpense;\n    }\n}\n\nexport default new Budget();\n","import store from '../../store/main.js';\n\nexport default class FormView {\n    constructor() {\n        this.formElements = {\n            inputs: {\n                type: document.querySelector('.form__field--type'),\n                description: document.querySelector('.form__field--description'),\n                value: document.querySelector('.form__field--value'),\n                submit: document.querySelector('.form__submit'),\n            },\n            errors: {\n                description: document.querySelector('.form__error--description'),\n                value: document.querySelector('.form__error--value'),\n            },\n        };\n        this.transaction = null;\n        this.formPropagator = null;\n    }\n\n    addEventHandler(formPropagator) {\n        this.formElements.inputs.submit.addEventListener('click', (event) => {\n            this.formPropagator = formPropagator;\n            this.checkFormData();\n            event.preventDefault();\n        });\n        this.formElements.inputs.description.addEventListener('focus', () => {\n            this.formElements.errors.description.classList.add('form__error--display');\n        });\n        this.formElements.inputs.value.addEventListener('focus', () => {\n            this.formElements.errors.value.classList.add('form__error--display');\n        });\n    }\n\n    checkFormData() {\n        const validationForm = { description: null, value: null };\n\n        // Check input description\n        if (\n            this.formElements.inputs\n                .description.value.length < 1 || this.formElements.inputs\n                .description.value.length > 80\n        ) {\n            validationForm.description = false;\n            this.formElements.errors.description.classList.remove('form__error--display');\n        } else {\n            validationForm.description = true;\n        }\n\n        // Check input value\n        if (Number(this.formElements.inputs.value.value) <= 0) {\n            validationForm.value = false;\n            this.formElements.errors.value.classList.remove('form__error--display');\n        } else {\n            validationForm.value = true;\n        }\n\n        // Check validation form\n        if (validationForm.description === true && validationForm.value === true) {\n            this.createId();\n        }\n    }\n\n    createId() {\n        let id = null;\n        if (this.transaction === null) {\n            id = 1;\n        } else {\n            id = this.transaction.id + 1;\n        }\n        this.addTransaction(id);\n    }\n\n    addTransaction(id) {\n        this.transaction = {\n            id,\n            type: this.formElements.inputs.type.value,\n            description: this.formElements.inputs.description.value,\n            value: parseFloat(this.formElements.inputs.value.value),\n        };\n        store.modules.form.callFormSetters(this.transaction);\n        this.formPropagator();\n        this.clearFields();\n    }\n\n    clearFields() {\n        this.formElements.inputs.description.value = '';\n        this.formElements.inputs.value.value = '';\n    }\n}\n","import store from '../../store/main.js';\n\nexport default class TransactionView {\n    constructor() {\n        this.incomeContainer = document.querySelector('.app__incomeTransaction');\n        this.expensesContainer = document.querySelector('.app__expenseTransaction');\n        this.targetedTransaction = null;\n    }\n\n    addEventHandler(transactionPropagator, cardPropagator) {\n        const expenseElements = document.querySelectorAll('.transaction__delete');\n        for (let index = 0; index < expenseElements.length; index += 1) {\n            expenseElements[index].addEventListener('click', (event) => {\n                this.removeTransaction(event, transactionPropagator, cardPropagator);\n            });\n        }\n    }\n\n    createTransaction() {\n        const lastTransaction = store.modules.form.formData.slice(-1)[0];\n        if (lastTransaction.type === 'inc') {\n            const incomeTransaction = `\n            <div class=\"transaction\" id=\"${lastTransaction.id}\">\n                <div class=\"transaction__container transaction__container--row transaction__container--spaceBetween transaction__container--itemsCenter\">\n                    <span>${lastTransaction.description}</span>\n                    <div class=\"transaction__container transaction__container--row transaction__container--spaceBetween transaction__container--itemsCenter\">\n                        <span class=\"transaction__value\">${lastTransaction.value}</span>\n                        <button class=\"transaction__delete transaction__delete--active\">\n                            <i class=\"transaction__icon far fa-times-circle\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>`;\n            this.incomeContainer.insertAdjacentHTML('beforeend', incomeTransaction);\n        } else {\n            const expenseTransaction = `\n            <div class=\"transaction\" id=\"${lastTransaction.id}\">\n                <div class=\"transaction__container transaction__container--row transaction__container--spaceBetween transaction__container--itemsCenter\">\n                    <span class=\"transaction__description\">${lastTransaction.description}</span>\n                    <div class=\"transaction__container transaction__container--row transaction__container--spaceBetween transaction__container--itemsCenter\">\n                        <span class=\"transaction__value\">${lastTransaction.value}</span>\n                        <span class=\"transaction__percentage transaction__percentage--center\"></span>\n                        <button class=\"transaction__delete transaction__delete--active\">\n                            <i class=\"transaction__icon far fa-times-circle\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>`;\n            this.expensesContainer.insertAdjacentHTML('beforeend', expenseTransaction);\n        }\n    }\n\n    static addPercentage() {\n        const domPercentages = document.querySelectorAll('.transaction__percentage');\n\n        domPercentages.forEach((domElement) => {\n            const domPercentage = domElement;\n            const domExpenseId = domPercentage.parentElement.parentElement.parentElement.id;\n\n            const expenseTransaction = store.modules.form.formData.find(\n                (transaction) => transaction.id === Number(domExpenseId),\n            );\n\n            const expenseValue = expenseTransaction.value;\n            const expensePercentage = (expenseValue * 100) / store.modules.form.totalIncome;\n            domPercentage.textContent = `${Math.round(expensePercentage)} %`;\n        });\n    }\n\n    removeTransaction(event, transactionPropagator, cardPropagator) {\n        this.targetedTransaction = event.target\n            .parentElement.parentElement\n            .parentElement.parentElement;\n\n        if (this.targetedTransaction.parentElement !== null) {\n            this.targetedTransaction.parentElement.removeChild(this.targetedTransaction);\n\n            const transaction = store.modules.form.formData.find(\n                (element) => element.id === Number(this.targetedTransaction.id),\n            );\n\n            store.modules.form.callFormSetters(transaction);\n            transactionPropagator();\n            cardPropagator();\n        }\n    }\n}\n","import store from '../../store/main.js';\n\nexport default class BudgetView {\n    constructor() {\n        this.budgetElement = document.querySelector('.budget');\n    }\n\n    static calculateBudget() {\n        store.modules.budget.setBudget(\n            store.modules.form.totalIncome, store.modules.form.totalExpense,\n        );\n    }\n\n    displayBudget() {\n        this.budgetElement.textContent = store.modules.budget.budget;\n    }\n}\n","import store from '../../store/main.js';\n\nexport default class CardView {\n    constructor() {\n        this.cardIncomeElement = document.querySelector('.card__value--income');\n        this.cardExpenseElement = document.querySelector('.card__value--expense');\n        this.cardExpensePercentageElement = document.querySelector('.card__percentage');\n        this.expensePercentage = null;\n    }\n\n    calculatePercentage() {\n        this.expensePercentage = (\n            store.modules.form.totalExpense * 100\n        ) / store.modules.form.totalIncome;\n    }\n\n    displayCard() {\n        this.cardIncomeElement.textContent = `+ ${store.modules.form.totalIncome}`;\n        this.cardExpenseElement.textContent = `- ${store.modules.form.totalExpense}`;\n        this.cardExpensePercentageElement.textContent = `${Math.round(this.expensePercentage)} %`;\n    }\n}\n","import './index.scss';\nimport DateView from './components/Date/DateView.js';\nimport FormView from './components/Form/FormView.js';\nimport TransactionView from './components/Transaction/TransactionView.js';\nimport BudgetView from './components/Budget/BudgetView.js';\nimport CardView from './components/Card/CardView.js';\n\nconst initBudget = () => {\n    const budget = new BudgetView();\n    BudgetView.calculateBudget();\n    budget.displayBudget();\n};\n\nconst initDate = () => {\n    const date = new DateView();\n    date.displayDate();\n};\n\nconst initCard = () => {\n    const card = new CardView();\n    card.calculatePercentage();\n    card.displayCard();\n};\n\nconst cardPropagator = () => {\n    initCard();\n};\n\nconst transactionPropagator = () => {\n    TransactionView.addPercentage();\n    initBudget();\n};\n\nconst initTransaction = () => {\n    const transaction = new TransactionView();\n    transaction.createTransaction();\n    TransactionView.addPercentage();\n    transaction.addEventHandler(transactionPropagator, cardPropagator);\n};\n\nconst formPropagator = () => {\n    initTransaction();\n    initCard();\n    initBudget();\n};\n\nconst initForm = () => {\n    const form = new FormView();\n    form.addEventHandler(formPropagator);\n};\n\ninitDate();\ninitForm();\n"],"names":["DateView","this","dateElement","document","querySelector","date","Date","currentYear","getFullYear","currentMonth","getMonth","textContent","modules","form","Form","formData","totalIncome","totalExpense","transaction","transactionInFormData","find","element","id","undefined","push","splice","indexOf","incomeTransaction","value","expenseTransaction","type","setTotalIncome","setTotalExpense","setFormData","budget","Budget","FormView","formElements","inputs","description","submit","errors","formPropagator","addEventListener","event","checkFormData","preventDefault","classList","add","validationForm","length","remove","Number","createId","addTransaction","parseFloat","store","clearFields","TransactionView","incomeContainer","expensesContainer","targetedTransaction","transactionPropagator","cardPropagator","expenseElements","querySelectorAll","index","removeTransaction","lastTransaction","insertAdjacentHTML","target","parentElement","removeChild","forEach","domElement","domPercentage","domExpenseId","expensePercentage","Math","round","BudgetView","budgetElement","CardView","cardIncomeElement","cardExpenseElement","cardExpensePercentageElement","initBudget","calculateBudget","displayBudget","initCard","card","calculatePercentage","displayCard","addPercentage","displayDate","addEventHandler","createTransaction"],"sourceRoot":""}